{"version":3,"sources":["components/header/header.js","components/form/form.js","components/results/results.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Form","props","handleSubmit","e","a","preventDefault","state","url","method","request","setState","fetch","raw","headers","forEach","item","push","json","fetchedResults","handler","alert","console","log","handleChangeURL","target","value","handleChangeMethod","id","requsted","onSubmit","this","name","type","onChange","className","prompt","onClick","React","Component","Results","src","theme","response","Footer","App","handlerForm","results","result","count","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90b8a0c6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './header.scss';\n\nconst Header = () =>{\n    return(\n        <header>\n            <h1>\n                RESTy\n            </h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nimport './form.scss';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: '',\n            method: '',\n            requsted: {},\n        };\n    }\n\n    handleSubmit = async (e) => {\n        try {\n            e.preventDefault();\n\n            if (this.state.url && this.state.method) {\n                let request = {\n                    url: this.state.url,\n                    method: this.state.method,\n                };\n                let url = '';\n                let method = '';\n\n                this.setState({ request, url, method });\n\n                const raw = await fetch(request.url);\n                let headers = [];\n                raw.headers.forEach(item => headers.push(item));\n                const fetchedResults = await raw.json();\n                this.props.handler(headers, fetchedResults);\n            }\n\n            else {\n                alert('missing information');\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    handleChangeURL = e => {\n        const url = e.target.value;\n        this.setState({ url });\n    };\n\n    handleChangeMethod = e => {\n        const method = e.target.id;\n        this.setState({ method });\n    };\n\n    render() {\n        return (\n            <form id='form' onSubmit={this.handleSubmit}>\n                <label >\n                    <span>URL:\n              <input id='textInput' name='url' type='text' onChange={this.handleChangeURL} className={this.state.url ? this.state.url : ''} />\n                        <button type=\"submit\">{this.props.prompt}</button>\n                    </span>\n                </label>\n                <label className=\"methods\">\n                    <span name='method' className={this.state.method === 'GET' ? 'active' : ''} id=\"GET\" onClick={this.handleChangeMethod}>GET\n              <span name='method' className={this.state.method === 'POST' ? 'active' : ''} id=\"POST\" onClick={this.handleChangeMethod}>POST</span>\n                        <span name='method' className={this.state.method === 'PUT' ? 'active' : ''} id=\"PUT\" onClick={this.handleChangeMethod}>PUT</span>\n                        <span name='method' className={this.state.method === 'DELETE' ? 'active' : ''} id=\"DELETE\" onClick={this.handleChangeMethod}>DELETE</span>\n                    </span>\n\n                </label>\n            </form>\n        );\n    }\n\n\n    // render() {\n    //     return (\n    //         <main classname=\"formArea\">\n    //             <form onSubmit={this.submitHandler}>\n    //                 <lable htmlFor=\"url\">URL : <input type=\"text\" name=\"url\" id=\"url\"></input><input type=\"submit\" value=\"GO!\" /></lable>\n    //                 <lable htmlFor=\"GET\">GET <input type=\"radio\" name=\"method\" id=\"GET\" value=\"GET\" />\n    //                 <lable htmlFor=\"POST\">POST <input type=\"radio\" name=\"method\" id=\"POST\" value=\"POST\" /></lable>\n    //                 <lable htmlFor=\"PUT\">PUT <input type=\"radio\" name=\"method\" id=\"PUT\" value=\"PUT\" />\n    //                 <lable htmlFor=\"PUT\">DELETE <input type=\"radio\" name=\"method\" id=\"DELETE\" value=\"DELETE\" /></lable></lable>\n    //                 </lable>\n\n\n\n\n    //             </form>\n\n    //             <p>{this.state.method} {this.state.url}</p>\n\n    //         </main>\n    //     )\n    // }\n\n    // submitHandler = (e) => {\n    //     e.preventDefault();\n    //     const method = e.target.method.value;\n    //     const url = e.target.url.value;\n    //     this.setState({ method, url });\n    // }\n\n}\n\nexport default Form;","import React from 'react';\nimport ReactJson from 'react-json-view';\n\nimport './results.scss';\n\nfunction Results (props){\n    return(\n        <div id=\"resultDiv\">\n            <section className=\"results\">\n                <span>Headers</span>\n                <ReactJson id=\"headersID\" src={props.headers} theme=\"shapeshifter:inverted\" />\n                <span>Response</span>\n                <ReactJson id=\"responseID\" src={props.response} theme=\"shapeshifter:inverted\" />\n            </section>\n        </div>\n    );\n}\n\nexport default Results;\n","import React from 'react';\nimport './footer.scss';\nconst Footer = () => {\n    return (\n        <footer>\n            &copy rights Ahmad AlHabrawi 2020\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\n\n\nimport Header from './components/header/header';\nimport Form from './components/form/form';\nimport Results from './components/results/results'\nimport Footer from './components/footer/footer';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0, results: [] };\n  }\n  handlerForm = (headers, results) => {\n    const result = { headers, response: results };\n    this.setState({ count: results.count, results: result });\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <main>\n          <Form prompt='GO!' handler={this.handlerForm} />\n          <Results response={this.state.results} headers={this.state.results.headers} />\n        </main>\n        <Footer />\n\n      </>\n    )\n  }\n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}