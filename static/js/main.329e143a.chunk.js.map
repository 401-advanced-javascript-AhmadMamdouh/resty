{"version":3,"sources":["components/header/header.js","components/form/form.js","components/footer/footer.js","components/results/results.js","components/history/history.js","components/help/help.js","App.js","serviceWorker.js","index.js","img/three-blue-dots.gif"],"names":["Header","data-testid","to","Form","props","setMethod","e","setState","method","target","value","setUrl","url","setData","data","sendInput","handleInput","state","render","exact","path","className","placeholder","defaultValue","defaultUrl","onChange","type","name","defaultChecked","htmlFor","checked","onClick","defaultData","defaultMethod","React","Component","Footer","customTheme","theme","overflow","Results","resultsIn","id","json","headers","padding","loading","src","loadingImage","alt","Histroy","makeRequest","request","talkToApi","showDetails","showRequestDetails","hash","pastSearches","Object","keys","map","key","App","requestObj","a","toggleLoading","axios","results","getResults","saveToLocalStorage","console","log","requestData","md5","JSON","stringify","stringifiedObj","localStorage","setItem","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wSA6BeA,G,MAvBA,WACX,OACI,6BACI,gCACI,sCAEJ,6BACI,4BACI,4BACI,kBAAC,IAAD,CAASC,cAAY,WAAWC,GAAG,KAAnC,SAEJ,4BACI,kBAAC,IAAD,CAASD,cAAY,cAAcC,GAAG,YAAtC,YAEJ,4BACI,kBAAC,IAAD,CAASD,cAAY,WAAWC,GAAG,SAAnC,c,OC+CTC,G,wDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAV/B,EAWnBC,OAAS,SAAAL,GAAC,OAAI,EAAKC,SAAS,CAAEK,IAAKN,EAAEG,OAAOC,SAXzB,EAYnBG,QAAU,SAAAP,GAAC,OAAI,EAAKC,SAAS,CAAEO,KAAMR,EAAEG,OAAOC,SAZ3B,EAcnBK,UAAY,kBAAM,EAAKX,MAAMY,YAAY,EAAKC,QAd3B,EAgBnBC,OAAS,kBACP,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAClB,oCACE,6BAASC,UAAU,QAEjB,kCACE,uCACA,2BAAOpB,cAAY,WAAWqB,YAAY,UAAUC,aAAc,EAAKnB,MAAMoB,WAAYC,SAAU,EAAKd,UAG1G,kCACE,0CACA,6BACE,2BAAOe,KAAK,QAAQhB,MAAM,MAAMiB,KAAK,SAASF,SAAU,EAAKpB,UAC3DuB,eAAuC,QAAtB,EAAKX,MAAMT,SAC9B,2BAAOqB,QAAQ,OAAf,OAGA,2BAAO5B,cAAY,cAAcyB,KAAK,QAAQhB,MAAM,OAAOiB,KAAK,SAASF,SAAU,EAAKpB,UAAWyB,QAA+B,SAAtB,EAAKb,MAAMT,SAEvH,2BAAOqB,QAAQ,QAAf,QAEA,2BAAOH,KAAK,QAAQhB,MAAM,MAAMiB,KAAK,SAASF,SAAU,EAAKpB,UAAWyB,QAA+B,QAAtB,EAAKb,MAAMT,SAC5F,2BAAOqB,QAAQ,OAAf,OAEA,2BAAOH,KAAK,QAAQhB,MAAM,SAASiB,KAAK,SAASF,SAAU,EAAKpB,UAAWyB,QAA+B,WAAtB,EAAKb,MAAMT,SAC/F,2BAAOqB,QAAQ,UAAf,YAKJ,4BAAQ5B,cAAY,SAAS8B,QAAS,EAAKhB,WAA3C,OAKF,kCACE,wCACA,8BAAUU,SAAU,EAAKZ,QAASU,aAAc,EAAKnB,MAAM4B,kBApD/D,EAAKf,MAAQ,CACXT,OAAQ,EAAKJ,MAAM6B,cACnBrB,IAAK,EAAKR,MAAMoB,WAChBV,KAAK,EAAKV,MAAM4B,aALD,E,UAFFE,IAAMC,YCKVC,G,MARA,WACX,OACI,uE,mDCIFC,G,OAAW,2BACZC,KADY,IAEfC,SAAU,YAmCGC,E,4MA9BbtB,OAAS,WACP,OACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAEY,UAAzB,EAAKhB,MAAMqC,UAAyB,2CACP,OAAzB,EAAKrC,MAAMqC,UAEV,oCACE,yBAAKC,GAAI,EAAKtC,MAAMqC,WAClB,uCACA,kBAAC,IAAD,CAAcE,KAAM,EAAKvC,MAAMU,KAAK8B,QAASN,MAAOD,EAAaQ,QAAS,KAE5E,yBAAKH,GAAI,EAAKtC,MAAMqC,WAClB,uCACA,kBAAC,IAAD,CAAcE,KAAM,EAAKvC,MAAMU,KAAKA,KAAMwB,MAAOD,EAAaQ,QAAS,MAI3E,EAAKzC,MAAM0C,QACT,6BAASJ,GAAG,QACV,yBAAMK,IAAKC,IAAcC,IAAI,aAE7B,O,YAxBEf,IAAMC,WCiEbe,G,yDAxEb,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IAMR+C,YAAc,SAACC,GACb,EAAKhD,MAAMiD,UAAUD,GACrB,EAAK7C,SAAS,CAAC+C,aAAa,KATX,EAWnBC,mBAAqB,SAACC,GACpB,EAAKjD,SAAS,CACZ+C,aAAa,EACbE,KAAKA,KAdU,EAkBnBtC,OAAS,WACP,OAAI,EAAKd,MAAMqD,aAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOtC,OAAK,EAACC,KAAK,KAChB,+BACE,4BAEIsC,OAAOC,KAAK,EAAKvD,MAAMqD,cAAcG,KAAI,SAAAJ,GAAI,OAC3C,wBAAIK,IAAKL,GACP,0BAAMnC,UAAW,EAAKjB,MAAMqD,aAAaD,GAAMhD,QAAS,EAAKJ,MAAMqD,aAAaD,GAAMhD,OAAtF,KACA,4BAAQuB,QAAS,kBAAM,EAAKoB,YAAY,EAAK/C,MAAMqD,aAAaD,MAAhE,IAA0E,EAAKpD,MAAMqD,aAAaD,GAAM5C,IAAxG,YAMZ,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,YAChB,uCACA,+BACE,4BAEIsC,OAAOC,KAAK,EAAKvD,MAAMqD,cAAcG,KAAI,SAAAJ,GAAI,OAC3C,wBAAIK,IAAKL,GACP,0BAAMnC,UAAW,EAAKjB,MAAMqD,aAAaD,GAAMhD,QAAS,EAAKJ,MAAMqD,aAAaD,GAAMhD,OAAtF,KACA,0BAAMuB,QAAS,kBAAM,EAAKwB,mBAAmBC,KAA7C,IAAsD,EAAKpD,MAAMqD,aAAaD,GAAM5C,IAApF,WAKA,EAAKK,MAAMqC,YACf,6BAEE,2BAAI,EAAKlD,MAAMqD,aAAa,EAAKxC,MAAMuC,MAAMhD,QAC7C,2BAAI,EAAKJ,MAAMqD,aAAa,EAAKxC,MAAMuC,MAAM5C,KAC7C,2BAAI,EAAKR,MAAMqD,aAAa,EAAKxC,MAAMuC,MAAM1C,MAE7C,kBAAC,IAAD,CAAMZ,GAAG,IAAI6B,QAAS,kBAAM,EAAKoB,YAAY,EAAK/C,MAAMqD,aAAa,EAAKxC,MAAMuC,SAAhF,WAMA,OAKd,kBAAC,IAAD,CAAOpC,KAAK,YACV,yCAjEJ,EAAKH,MAAQ,CACXqC,aAAa,EACbE,KAAK,IAJU,E,UAFCtB,IAAMC,YCDb,oBACb,kBAAC,IAAD,CAAOhB,OAAK,EAACC,KAAK,SAChB,oCACA,2XCoEW0C,E,kDA5Db,WAAa1D,GAAQ,IAAD,8BAClB,cAAMA,IAURiD,UAXoB,uCAWR,WAAOU,GAAP,eAAAC,EAAA,6DAEV,EAAKC,gBACL,EAAK1D,SAAS,CAAEK,IAAKmD,EAAWnD,IAAKE,KAAMiD,EAAWjD,OACtD,EAAKP,SAAS,CAAEC,OAAQuD,EAAWvD,SAJzB,kBAOY0D,IAAMH,GAPlB,OAOJI,EAPI,OAQR,EAAKC,WAAWD,GAChB,EAAKE,mBAAmBN,GAThB,kDAWRO,QAAQC,IAAR,MACA,EAAKN,gBACL,EAAK1D,SAAS,CAACkC,UAAU,QAAS+B,YAAY,gBAbtC,0DAXQ,wDA4BpBP,cAAgB,kBAAM,EAAK1D,SAAS,CAACuC,SAAU,EAAK7B,MAAM6B,WA5BtC,EA8BpBsB,WAAa,SAACI,GACZ,EAAKP,gBACL,EAAK1D,SAAS,CAAEiE,cAAa/B,UAAU,aAhCrB,EAmCpB4B,mBAnCoB,uCAmCC,WAAON,GAAP,iBAAAC,EAAA,6DACbR,EAAOiB,IAAIC,KAAKC,UAAUZ,IADb,SAGb,EAAKxD,SAAS,CAACkD,aAAa,2BAAM,EAAKxC,MAAMwC,cAAlB,kBAAiCD,EAAOO,MAHtD,OAKfa,EAAiBF,KAAKC,UAAU,EAAK1D,MAAMwC,cAE/CoB,aAAaC,QAAQ,eAAgBF,GAPlB,2CAnCD,wDA6CpB1D,OAAS,kBACP,kBAAC,IAAD,CAAeG,UAAU,OACvB,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAML,YAAa,EAAKqC,UAAW7B,WAAY,EAAKP,MAAML,IAAKqB,cAAe,EAAKhB,MAAMT,OAAQwB,YAAa,EAAKf,MAAMH,OACzH,kBAAC,EAAD,CAAS2C,aAAc,EAAKxC,MAAMwC,aAAcJ,UAAW,EAAKA,YAChE,kBAAC,EAAD,CAASvC,KAAM,EAAKG,MAAMuD,YAAa/B,UAAW,EAAKxB,MAAMwB,UAAWK,QAAS,EAAK7B,MAAM6B,WAE9F,kBAAC,EAAD,QApDF,EAAK7B,MAAQ,CACXuD,YAAY,KACZ/B,UAAW,KACXK,SAAS,EACTW,aAAciB,KAAKK,MAAMF,aAAaG,QAAQ,iBAC9CxE,OAAO,OAPS,E,UAFJ0B,IAAMC,WCAJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASpE,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFqE,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,6C","file":"static/js/main.329e143a.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './header.scss';\n\n\nconst Header = () => {\n    return (\n        <div>\n            <header>\n                <h1>RESTy</h1>\n            </header>\n            <nav>\n                <ul>\n                    <li>\n                        <NavLink data-testid=\"homelink\" to=\"/\">Home</NavLink>\n                    </li>\n                    <li>\n                        <NavLink data-testid=\"historylink\" to=\"/history\">History</NavLink>\n                    </li>\n                    <li>\n                        <NavLink data-testid=\"helplink\" to=\"/help\">Help</NavLink>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport './form.scss'\n\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: this.props.defaultMethod,\n      url: this.props.defaultUrl,\n      data:this.props.defaultData,\n    }\n\n  }\n\n  setMethod = e => this.setState({ method: e.target.value });\n  setUrl = e => this.setState({ url: e.target.value });\n  setData = e => this.setState({ data: e.target.value});\n\n  sendInput = () => this.props.handleInput(this.state);\n\n  render = () => (\n    <Route exact path=\"/\">\n    <>\n      <section className=\"form\">\n\n        <fieldset>\n          <legend>URL</legend>\n          <input data-testid=\"urlInput\" placeholder=\"http://\" defaultValue={this.props.defaultUrl} onChange={this.setUrl} />\n        </fieldset>\n\n        <fieldset>\n          <legend>Method</legend>\n          <div>\n            <input type=\"radio\" value=\"GET\" name=\"method\" onChange={this.setMethod}\n              defaultChecked={ this.state.method === \"GET\" ? true : false } />\n            <label htmlFor=\"GET\">GET</label>\n\n\n            <input data-testid=\"methodInput\" type=\"radio\" value=\"POST\" name=\"method\" onChange={this.setMethod} checked={this.state.method === \"POST\" ? true : false} />\n\n            <label htmlFor=\"POST\">POST</label>\n\n            <input type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.setMethod} checked={this.state.method === 'PUT' ? true : false} />\n            <label htmlFor=\"PUT\">PUT</label>\n\n            <input type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.setMethod} checked={this.state.method === 'DELETE' ? true : false}/>\n            <label htmlFor=\"DELETE\">DELETE</label>\n\n          </div>\n        </fieldset>\n\n        <button data-testid=\"submit\" onClick={this.sendInput}>Go</button>\n\n\n\n      </section>\n      <fieldset>\n        <legend>Body</legend>\n        <textarea onChange={this.setData} defaultValue={this.props.defaultData}></textarea>\n      </fieldset>\n    </>\n    </Route>\n  );\n}\n\nexport default Form;","import React from 'react';\nimport './footer.scss';\nconst Footer = () => {\n    return (\n        <footer>\n            &copy rights Ahmad AlHabrawi 2020\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport JSONPrettify from 'react-json-prettify';\nimport theme from 'react-json-prettify/dist/themes/xcode';\nimport { Route } from 'react-router-dom';\n\nimport loadingImage from '../../img/three-blue-dots.gif';\nimport './results.scss';\n\nconst customTheme = {\n  ...theme,\n  overflow: 'scroll',\n}\n\nclass Results extends React.Component {\n\n  render = () => {\n    return (\n      <Route exact path=\"/\">\n        {\n          (this.props.resultsIn === 'error') ? <h1>Bad Request</h1>\n            : (this.props.resultsIn !== null) ?\n              (\n                <>\n                  <div id={this.props.resultsIn}>\n                    <h2>Headers</h2>\n                    <JSONPrettify json={this.props.data.headers} theme={customTheme} padding={6} />\n                  </div>\n                  <div id={this.props.resultsIn}>\n                    <h2>Results</h2>\n                    <JSONPrettify json={this.props.data.data} theme={customTheme} padding={6} />\n                  </div>\n                </>\n              ) : (\n                this.props.loading ?\n                  <section id=\"logo\">\n                    < img src={loadingImage} alt=\"loading\" />\n                  </section>\n                  : null\n              )\n        }\n      </Route>\n    )\n  }\n}\n\nexport default Results;\n","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport './history.scss';\n\nclass Histroy extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDetails: false,\n      hash:'',\n    }\n  }\n  makeRequest = (request) => {\n    this.props.talkToApi(request);\n    this.setState({showDetails: false});\n  }\n  showRequestDetails = (hash) => {\n    this.setState({\n      showDetails: true,\n      hash:hash,\n    });\n  }\n  \n  render = () => {\n    if (this.props.pastSearches) {\n      return (\n        <Switch>\n          <Route exact path=\"/\">\n            <aside>\n              <ul>\n                {\n                  Object.keys(this.props.pastSearches).map(hash =>\n                    <li key={hash}>\n                      <span className={this.props.pastSearches[hash].method}>{this.props.pastSearches[hash].method} </span>\n                      <button onClick={() => this.makeRequest(this.props.pastSearches[hash])}> {this.props.pastSearches[hash].url} </button>\n                    </li>\n                  )}\n              </ul>\n            </aside >\n          </Route>\n          <Route exact path=\"/history\">\n            <h2>History</h2>\n            <aside>\n              <ul>\n                {\n                  Object.keys(this.props.pastSearches).map(hash =>\n                    <li key={hash}>\n                      <span className={this.props.pastSearches[hash].method}>{this.props.pastSearches[hash].method} </span>\n                      <span onClick={() => this.showRequestDetails(hash)}> {this.props.pastSearches[hash].url} </span>\n                    </li>\n                  )}\n              </ul>\n            </aside >\n                  {  (this.state.showDetails) ?\n                  <div>\n\n                    <p>{this.props.pastSearches[this.state.hash].method}</p>\n                    <p>{this.props.pastSearches[this.state.hash].url}</p>\n                    <p>{this.props.pastSearches[this.state.hash].data}</p>\n\n                    <Link to=\"/\" onClick={() => this.makeRequest(this.props.pastSearches[this.state.hash])}>\n                      Re-Run\n                    </Link>\n\n                  </div>\n                  \n                  : null }\n          </Route>\n        </Switch>\n      );\n    } else { return (\n      <Route path=\"/history\">\n        <h2>History</h2>\n      </Route>\n    )}\n  }\n}\nexport default Histroy;\n\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nexport default () => (\n  <Route exact path=\"/help\">\n    <h2>Help</h2>\n    <p>Make API on the \"Home\" page by entering a url, selecting the method, and entering a request body if needed. Click on buttons for previous requests to make the API call again. See your complete history on the \"History\" page, you can click on the url to see details about your previous API calls and you can re-run the calls from this page as well.</p>\n  </Route>\n);","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport md5 from 'md5';\n\nimport Header from './components/header/header';\nimport Form from './components/form/form';\nimport Footer from './components/footer/footer';\nimport Results from './components/results/results';\nimport History from './components/history/history';\nimport Help from './components/help/help';\n\nclass App extends React.Component { \n\n  constructor (props) {\n    super(props);\n    this.state = {\n      requestData:null,\n      resultsIn: null,\n      loading: false,\n      pastSearches: JSON.parse(localStorage.getItem('pastSearches')),\n      method:'GET',\n    };\n  }\n\n  talkToApi = async (requestObj) => {\n\n    this.toggleLoading()\n    this.setState({ url: requestObj.url, data: requestObj.data});\n    this.setState({ method: requestObj.method})\n\n    try {\n      let results = await axios(requestObj);\n      this.getResults(results);\n      this.saveToLocalStorage(requestObj)\n    } catch(e) {\n      console.log(e)\n      this.toggleLoading();\n      this.setState({resultsIn:'error', requestData:'Bad Request'});\n    }\n  }\n\n  toggleLoading = () => this.setState({loading: !this.state.loading});\n\n  getResults = (requestData) => {\n    this.toggleLoading();\n    this.setState({ requestData, resultsIn:'results' })\n  }\n\n  saveToLocalStorage = async (requestObj) => {\n    const hash = md5(JSON.stringify(requestObj))\n\n    await this.setState({pastSearches: { ...this.state.pastSearches, [hash]: requestObj }});\n\n    let stringifiedObj = JSON.stringify(this.state.pastSearches);\n\n    localStorage.setItem('pastSearches', stringifiedObj);\n  }\n\n  render = () => (\n    <BrowserRouter className=\"App\">\n      <Header />\n      <main>\n        <Help />\n        <Form handleInput={this.talkToApi} defaultUrl={this.state.url} defaultMethod={this.state.method} defaultData={this.state.data}  />\n        <History pastSearches={this.state.pastSearches} talkToApi={this.talkToApi}/>\n        <Results data={this.state.requestData} resultsIn={this.state.resultsIn} loading={this.state.loading} />\n      </main>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/three-blue-dots.5a721cb2.gif\";"],"sourceRoot":""}